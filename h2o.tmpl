{{ define "hosts" }}
    paths:
      /:
      {{ if .Address }}
      {{ if and .Container.Node.ID .Address.HostPort }}
        # {{ .Container.Node.Name }}/{{ .Container.Name }}
        # proxy.reverse.url: "http://127.0.0.1:8080/"
        proxy.reverse.url: "http://{{ .Container.Node.Address.IP }}:{{ .Address.HostPort }}"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      {{ else }}
        # {{ .Container.Name }}
        proxy.reverse.url: "http://{{ .Address.IP }}:{{ .Address.Port }}"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      {{ end }}
      {{ else }}
        # {{ .Container.Name }}
        proxy.reverse.url: "http://{{ .Container.IP }} down"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      {{ end }}
    access-log: /dev/stdout
{{ end }}

max-connections: 65536
limit-request-body: 536870912
num-threads: 16
num-name-resolution-threads: 1
http2-reprioritize-blocking-assets: ON
tcp-fastopen: 33554432

listen:
  host: 0.0.0.0
  port: 80
hosts:
  "localhost":
    paths:
      /:
        file.dir: /h2o/examples/doc_root
    access-log: /dev/stdout

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ if (ne $host "") }}

hosts:
  "{{ $host }}:80":
    listen:
      host: 0.0.0.0
      port: 80
    paths:
      "/.well-known/acme-challenge/":
        file.dir: /data/acme/{{ $host }}/.well-known/acme-challenge/
   {{ if (exists (printf "/etc/letsencrypt/live/%s/privkey.pem" $host) ) }}
      "/":
        redirect: "https://{{ $host }}/"
  "{{ $host }}:443":
    listen:
      host: 0.0.0.0
      port: 443
      ssl:
        certificate-file: /etc/letsencrypt/live/{{ $host }}/fullchain.pem
        key-file:         /etc/letsencrypt/live/{{ $host }}/privkey.pem
  {{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ $address := index $container.Addresses 0 }}
    {{ template "hosts" (dict "Container" $container "Address" $address) }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
  {{ else }}
    {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
    {{ $address := where $container.Addresses "Port" $port | first }}
    {{ template "hosts" (dict "Container" $container "Address" $address) }}
  {{ end }}
  {{ end }}
  {{ end }}

{{ end }}
{{ end }}

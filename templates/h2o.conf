{{ define "hosts" }}
    access-log: /dev/stdout
    paths:
      /:
      {{ if .Address }}
        {{ if (and .Container.Node.ID .Address.HostPort) }}
        proxy.reverse.url: "http://{{ .Container.Node.Address.IP }}:{{ .Address.HostPort }}"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
        {{ else }}
        proxy.reverse.url: "http://{{ .Address.IP }}:{{ .Address.Port }}"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
        {{ end }}
      {{ else }}
        proxy.reverse.url: "http://{{ .Container.IP }} down"
        proxy.preserve-host: ON
        proxy.timeout.keepalive: 0
      {{ end }}
{{ end }}

max-connections: 65536
limit-request-body: 536870912
num-threads: 16
num-name-resolution-threads: 1
http2-reprioritize-blocking-assets: ON
tcp-fastopen: 33554432

listen:
  host: 0.0.0.0
  port: 80
hosts:
  "localhost":
    access-log: /dev/stdout
    paths:
      /:
        file.dir: /opt/web

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ if (ne $host "") }}
hosts:
  "{{ $host }}:80":
    listen:
      host: 0.0.0.0
      port: 80
    paths:
      /:
        redirect:
          status: 301
          url: "https://{{ $host }}/"
{{ if (exists (printf "/opt/data/certs/%s/privkey.pem" $host) ) }}
  "{{ $host }}:443":
    listen:
      host: 0.0.0.0
      port: 443
      ssl:
        certificate-file: /opt/data/certs/{{ $host }}/fullchain.pem
        key-file:         /opt/data/certs/{{ $host }}/privkey.pem
  {{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{ if (eq $addrLen 1) }}
  {{ $address := index $container.Addresses 0 }}
  {{ template "hosts" (dict "Container" $container "Address" $address) }}
  {{ else }}
  {{ $port    := coalesce $container.Env.VIRTUAL_PORT "80" }}
  {{ $address := where    $container.Addresses "Port" $port | first}}
  {{ template "hosts" (dict "Container" $container "Address" $address) }}
  {{ end }}
  {{ end }}
  {{ end }}
{{ end }}
{{ end }}

